{"version":3,"sources":["components/Navbar.js","components/board/board.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","shuffleArray","arr","map","Math","random","sort","b","initialChars","img","clicked","CharacterBox","props","characters","character","index","board_Character","onCharacterClick","ScoreDisplay","score","Character","handleClick","_this","src","this","onClick","React","Component","Board","state","user","_this2","setState","Object","objectSpread","current","board_ScoreDisplay","board_CharacterBox","Footer","class","App","components_Navbar","board_Board","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a2a4686.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Soccer Game\r\n      </a>\r\n    \r\n\r\n     \r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst shuffleArray = arr => (\r\n    arr\r\n      .map(a => [Math.random(), a])\r\n      .sort((a, b) => a[0] - b[0])\r\n      .map(a => a[1]) \r\n);\r\n\r\nconst initialChars = [\r\n    {    img: 'img/1.jpg',\r\n        clicked: false\r\n    },\r\n    {   img: 'img/2.jpg',\r\n        clicked: false\r\n    },\r\n    {  img: 'img/3.jpg',\r\n       clicked: false\r\n    },\r\n    {   img: 'img/4.jpg',\r\n        clicked: false\r\n    },\r\n    {   img: 'img/5.jpg',\r\n        clicked: false\r\n    },\r\n    {   img: 'img/6.jpg',\r\n        clicked: false\r\n    },\r\n    {   img: 'img/7.jpg',\r\n        clicked: false\r\n    },\r\n    {   img: 'img/8.jpg',\r\n        clicked: false\r\n    },\r\n   \r\n]\r\n\r\nconst CharacterBox = (props) => {\r\n    return(\r\n        <div className=\"character-box\">\r\n            {props.characters.map( (character, index) =>\r\n                 <Character character={character} index={index} onCharacterClick={props.onCharacterClick} />)}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n\r\nconst ScoreDisplay = (props) => (<div className=\"score-keeper\">Score: {props.score}</div>);\r\n\r\nclass Character extends React.Component{\r\n\r\n    handleClick = () => {\r\n        this.props.onCharacterClick(this.props.index);\r\n    }\r\n\r\n    render(){ return(\r\n       \r\n            <div className=\"character\">\r\n                <img \r\n                    src={this.props.character.img} \r\n                    className=\"profile-pic\"\r\n                    onClick={this.handleClick}/>\r\n            </div>\r\n      \r\n    )\r\n    }\r\n}\r\n\r\nexport default class Board extends React.Component {\r\n\r\n   \r\n        state = {\r\n                  user: { score: 0 },\r\n                  characters: shuffleArray( initialChars )\r\n                }; \r\n\r\n    \r\n    onCharacterClick = ( index ) =>{\r\n        if( !this.state.characters[index].clicked ){\r\n            this.setState({\r\n                characters: shuffleArray( this.state.characters.map( (character, current) =>  {\r\n                    return ( current === index ) ? { ...character, clicked:true } : character\r\n                })),\r\n                user: {\r\n                    ...this.state.user,\r\n                    score: this.state.user.score + 1\r\n                }\r\n            });\r\n           \r\n        } else {\r\n            this.setState({\r\n                characters: shuffleArray(this.state.characters.map( character => { return { ...character, clicked : false } })),\r\n                user: {\r\n                    ...this.state.user,\r\n                    score: 0\r\n                }\r\n            });\r\n           \r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    render(){\r\n        return (\r\n\r\n            <div className=\"Board\">\r\n                 <ScoreDisplay score={this.state.user.score} />\r\n                <CharacterBox \r\n                    characters={this.state.characters} \r\n                    onCharacterClick={this.onCharacterClick} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}"," \r\nimport React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer class=\"footer fixed-bottom bg-light\">\r\n      <div class=\"container\">\r\n        <span class=\"text-muted\"></span>\r\n        <p class=\"text-muted\">Copyright &copy; Stoyan Shivarov 2019</p>\r\n        \r\n      </div>\r\n    </footer>\r\n\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Board from \"./components/board/board\";\nimport Footer from \"./components/Footer\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Navbar />\n      <Board />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}